#! /usr/bin/env bpftrace

/* bpfbench.bt - A bpftrace implementation of bpfbench.py.
 * Uses: Linux, eBPF, bpftrace.
 *
 * Currently supports x86_64 architecture. Support for other architectures
 * is not guaranteed. If you find that this software supports your
 * architecture or wish to add support for your architecture, please submit
 * a PR.
 *
 * What's kind of insane is that the source code for this software is shorter
 * than this block of comments. The original bpfbench software was over 1000
 * lines of Python and C. Go bpftrace!
 *
 * Copyright Â© 2020 William Findlay
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * 14-Jun-2020  William Findlay  Created this.
 */

#include <linux/errno.h>

t:raw_syscalls:sys_enter {
    @start[tid] = (nsecs, args->id);
}

t:raw_syscalls:sys_exit {
    $start_t = @start[tid].0;
    $stop_t = nsecs;
    // uncomment to use usec instead of nsec
    //$start_t = @start[tid].0 / 1000;
    //$stop_t = nsecs / 1000;

    $start_id = @start[tid].1;
    $id = args->id;

    if ($id != $start_id) {
        return;
    }

    $dur = ($stop_t - $start_t);
    @avg_t[ksym(*(kaddr("sys_call_table") + (uint64)$id * 8))] = avg($dur);
}

END {
    clear(@start);

    printf("Printing average times (ns):\n");
    print(@avg_t);
    clear(@avg_t);
}
