#! /usr/bin/env bpftrace

/* bpfbench.bt - A bpftrace implementation of bpfbench.py.
 * Uses: Linux, eBPF, bpftrace.
 *
 * Currently supports x86_64 architecture. Support for other architectures
 * is not guaranteed. If you find that this software supports your
 * architecture or wish to add support for your architecture, please submit
 * a PR.
 *
 * What's kind of insane is that the source code for this software is shorter
 * than this block of comments. The original bpfbench software was over 1000
 * lines of Python and C. Go bpftrace!
 *
 * Copyright Â© 2020 William Findlay
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * 14-Jun-2020  William Findlay  Created this.
 */

t:raw_syscalls:sys_enter {
    @start[args->id, tid] = nsecs;
}

t:raw_syscalls:sys_exit {
    if (args->id < 0) {
        return;
    }
    @stop[args->id, tid] = nsecs;

    @duration[args->id] += (@stop[args->id, tid] - @start[args->id, tid]);
    @count[args->id] += (uint64)1;

    @[ksym(*(kaddr("sys_call_table") + (uint64)args->id * 8))] = @duration[args->id] / @count[args->id];
    //@[ksym(*(kaddr("sys_call_table") + (uint64)args->id * 8))] = avg(@duration[args->id]);
}

END {
    clear(@start);
    clear(@stop);
    clear(@duration);
    clear(@count);

    printf("Printing average times in nanoseconds:\n");
    print(@);
    clear(@);
}
